@model RecipeBuilder.ViewModels.MealPlannerDailyVM

@{ 
    ViewData["Title"] = "Daily Meals";
}

<!-- styling for page -->
<style>
    h1 {
        color: #4A743E;
        text-align: center;
        margin-top: 0;
        padding-top: 0; 
    }

    body {
        background-color: #ffffff; 
        color: #333; 
        margin: 0;
        padding: 0; 
    }

    .text-center {
        text-align: center; 
    }

    hr.rounded {
        border-top: 8px solid #96AE6D;
        border-radius: 5px;
        width: 80%; 
        margin: 0 auto; 
        margin-top: 10px; 
    }

    /* container for each meal entry */
    .meal-entry {
        background-color: #f9f9f9;
        border: 2px solid #96AE6D;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        position: relative; 
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        width: 500px; 
    }

    .meal-label {
        font-weight: bold;
        margin-right: 10px;
        width: 60px;
        text-align: right;
    }

    input[type="text"] {
        width: calc(100% - 150px); /* Adjust width based on container */
        padding: 8px;
        margin-right: 10px;
        box-sizing: border-box;
        border: 2px solid #96AE6D;
        border-radius: 4px;
    }

    .plus-button {
        background-color: #96AE6D;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 18px;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        transition: background-color 0.2s;
        margin-left: 10px; 
    }

    .plus-button:hover {
        background-color: #4A743E;
    }

    /* styling pop-up menu */
    .popup-menu {
        display: none; 
        position: absolute;
        left: 100%; 
        background-color: #f9f9f9;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        padding: 12px 16px;
        z-index: 1;
        margin-left: 10px; 
        border-radius: 5px; 
    }

    .meal-entry:hover .popup-menu {
        display: block; 
    }

    .popup-menu a {
        display: block;
        padding: 8px 0;
        color: #4A743E;
        text-decoration: none;
    }

    .popup-menu a:hover {
        text-decoration: underline;
    }

    /* note form styling */
    .note-popup {
        display: none;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #f9f9f9;
        padding: 20px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        z-index: 2;
        border-radius: 5px; 
    }

    .note-popup textarea {
        width: 100%;
        height: 60px;
        padding: 8px;
        border: 2px solid #96AE6D;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .note-popup button {
        background-color: #4A743E;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px; 
    }

    .note-popup button:hover {
        background-color: #96AE6D;
    }

    /* button to add more meals */
    .add-meal-btn {
        background-color: #4A743E;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 40px; 
        text-decoration: none;
    }

    .add-meal-btn:hover {
        background-color: #96AE6D;
    }

    /* center the meal list */
    #meal-list {
        display: flex;
        flex-direction: column;
        align-items: center; 
        margin-top: 20px;
    }

    /* margin for buttons */
    .button-container {
        margin-bottom: 40px;
    }
</style>

<body>
    <div class="container">
        <h1 class="display-4">Daily Meal Planner</h1>
        <h2 style="color: #4A743E;" class="text-center">@Model.mealPlanner.Date.ToString("dddd M/d/yyyy")</h2>
        <hr class="rounded">
        <br>

        @if (Model.mealPlanner.ScheduledMeals.Count != 0)
        {
            <!-- meal entries -->
            <div id="meal-list">
                @foreach (MealSet meal in Model.mealPlanner.ScheduledMeals)
                {
                    <div class="meal-entry">
                        <span class="meal-label">Meal @(@Model.mealPlanner.ScheduledMeals.IndexOf(meal) + 1):</span>
                        <input type="text" value="@meal.Description" readonly>
                        
                        @foreach (Recipe recipe in meal.Recipes) {
                            <p>@recipe.Name</p>
                        }
                        
                        <button class="plus-button" onclick="togglePopupMenu(this)">+</button>
                        
                        <!-- pop-up menu for the plus button -->
                        <div class="popup-menu">
                            <a asp-controller="Meals" asp-action="Index">Add Meal</a><br>
                            <a asp-controller="Recipe" asp-action="Index">Add Recipe</a><br>
                            <a href="#" onclick="showNotePopup(this)">Add Note</a>
                        </div>

                        <!-- inner pop-up for note -->
                        <div class="note-popup">
                            <textarea placeholder="Enter your note here"></textarea>
                            <button onclick="addNote(this)">Save Note</button>
                        </div>
                    </div>
                }
            </div>
        }
        
        else
        {
            <p class="text-center">No meals scheduled for today.</p>
        }

        <!-- button to add more meals -->
        <button class="add-meal-btn" onclick="addMeal()">Add Another Meal</button>

        <!-- javascript to handle adding new meals, toggling popup, and adding notes -->
        <script>
            function addMeal() {
                var mealList = document.getElementById('meal-list');
                var mealCount = mealList.getElementsByClassName('meal-entry').length + 1;

                // create a new meal entry
                var newMeal = document.createElement('div');
                newMeal.className = 'meal-entry';
                newMeal.innerHTML = `
                    <span class="meal-label">Meal ` + mealCount + `:</span>
                    <input type="text" placeholder="Enter meal ` + mealCount + `" readonly>
                    <button class="plus-button" onclick="togglePopupMenu(this)">+</button>
                    <div class="popup-menu">
                        <a asp-controller="Meals" asp-action="Index">Add Meal</a><br>
                        <a asp-controller="Recipe" asp-action="Index">Add Recipe</a><br>
                        <a href="#" onclick="showNotePopup(this)">Add Note</a>
                    </div>
                    <div class="note-popup">
                        <textarea placeholder="Enter your note here..."></textarea>
                        <button onclick="addNote(this)">Save Note</button>
                    </div>
                `;

                // add new meal entry to meal list
                mealList.appendChild(newMeal);
            }

            // toggle the popup menu visibility
            function togglePopupMenu(button) {
                var popupMenu = button.nextElementSibling;
                popupMenu.style.display = popupMenu.style.display === 'block' ? 'none' : 'block';
            }

            // show the inner note popup
            function showNotePopup(button) {
                var notePopup = button.parentElement.nextElementSibling;
                notePopup.style.display = notePopup.style.display === 'block' ? 'none' : 'block';
            }

            // add note to meal entry
            function addNote(button) {
                var noteInput = button.previousElementSibling.value;
                if (noteInput.trim() !== "") {
                    var mealEntry = button.closest('.meal-entry');
                    var mealInput = mealEntry.querySelector('input[type="text"]');
                    mealInput.value += (mealInput.value ? ', ' : '') + noteInput; // append note to meal input
                    button.previousElementSibling.value = ""; // clear the note input
                    button.parentElement.style.display = 'none'; // hide the note popup
                }
            }
        </script>
    </div>
</body>
