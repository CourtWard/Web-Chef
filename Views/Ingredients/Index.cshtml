@model RecipeBuilder.ViewModels.IngredientsIndexVM 
@{
    ViewData["Title"] = "Ingredients";
}

<style>
        h1 {
        color: #4A743E;
        text-align: center;
        }

        body {
            background-color: #ffffff; 
            color: #333; 
            margin: 0;
            padding: 20px;
        }

        .text-center {
            text-align: center; 
        }

        .search-container {
            margin: 20px 0; 
        }

        .search-container input[type="text"] {
            width: 300px; 
            padding: 10px; 
            border: 1px solid #ccc; 
            border-radius: 5px; 
        }

        .alphabet {
            display: flex; 
            justify-content: center;
            margin: 20px 0; 
        }

        .alphabet a {
            margin: 0 10px; 
            text-decoration: none; 
            color: #4A743E; 
            font-weight: bold; 
            transition: color 0.3s; 
        }

        .alphabet a:hover {
            color: #4A743E; 
        }

        .ingredients-list {
            margin-top: 30px; 
        }

        .ingredients-list ul {
            list-style-type: none; 
            padding: 0; 
        }

        .ingredients-list li {
            font-size: 18px; 
            margin: 5px 0; 
            padding: 10px; 
            border-bottom: 1px solid #ccc; 
        }

        .ingredients-list li:hover {
            background-color: #F4F3EC; 
        }

        .ingredients-list a {
            text-decoration: none; 
            color: #4A743E; 
        }
</style>

<body>
    <div class="text-center">
        <h1 class="display-4">Ingredients</h1>
        <div class="search-container">
            <input type="text" id="ingredientSearch" placeholder="Search" oninput="scrollToIngredient()">
        </div>
    </div>

    <div class="alphabet">
        @foreach (var letter in @Model.ingredientNamesDict.Keys)
        {
            <a href="#@letter">@letter</a>
        }

    </div>

    <div class="ingredients-list">
        @foreach (var letter in @Model.ingredientNamesDict.Keys)
        {
            <h2 id="@letter">@letter</h2>
            @foreach (var ingredient in @Model.ingredientNamesDict[letter])
            {
                <ul>
                    <li><a href="/Recipe/Index/@ingredient">@ingredient</a></li>
                </ul>
            }
        }
        
    </div>

    <script>
        function scrollToIngredient() {
            const searchInput = document.getElementById('ingredientSearch').value.toLowerCase();
            const items = document.querySelectorAll('.ingredients-list li a');

            items.forEach(item => {
                if (item.textContent.toLowerCase().includes(searchInput)) {
                    const ingredientSection = item.closest('ul').previousElementSibling; // get the following header (h2)
                    ingredientSection.scrollIntoView({ behavior: 'smooth' });
                    return; // exit loop
                }
            });
        }
    </script>
</body>