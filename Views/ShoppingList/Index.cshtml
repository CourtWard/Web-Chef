@model RecipeBuilder.ViewModels.ShoppingListIndexVM

@{
    ViewData["Title"] = "Shopping List";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping List</title>

    <style>
        /* button styling */
        button {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            color: white;
            background-color: #4A743E;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #96AE6D;
        }

        /* remove button styling */
        .remove-btn {
            background-color: #dc3545;
            margin-left: 10px;
        }

        .remove-btn:hover {
            background-color: #c82333;
        }

        /* background styling for the shopping list */
        #shoppingListContainer {
            background-color: #F4F3EC;
            padding: 20px;
            border-radius: 10px;
            max-width: 900px;
            margin: auto;
        }

        
        .smallInput {
            width: 80px;
        }

        /* scoped list item styling within #shoppingListContainer */
        #shoppingListContainer ul {
            list-style-type: disc;
            padding-left: 20px;
            color: #4A743E;
        }

        #shoppingListContainer ul li {
            font-size: 18px;
            margin: 5px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        
        #shoppingListContainer form {
            display: inline; /* Keep the form inline with the text */
        }

        #shoppingListContainer a, #shoppingListContainer button {
            margin-left: 10px;
            text-decoration: none;
            color: #96AE6D;
            border: none;
            background: none;
            cursor: pointer;
        }

        #shoppingListContainer a:hover, #shoppingListContainer button:hover {
            text-decoration: underline;
        }

        .alphabet {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }

        .alphabet a {
            margin: 0 10px;
            text-decoration: none;
            color: #4A743E;
            font-weight: bold;
            transition: color 0.3s;
        }

        .alphabet a:hover {
            color: #96AE6D;
        }

        /* ensure checkbox and text stay on the left side */
        .item-left {
            display: flex;
            align-items: center;
        }

        #shoppingListContainer ul li input[type="checkbox"] {
            margin-right: 10px;
        }

        /* button container for Add to Pantry and Remove buttons */
        .button-container {
            display: flex;
            justify-content: flex-end;
        }

        /* strikethrough effect only on text, not buttons */
        .completed {
            text-decoration: line-through;
            color: gray;
        }

        .text-center {
            text-align: center;
        }

        /* input field styling */
        .input-container {
            display: flex;
            justify-content: center;
            margin-bottom: 15px;
        }

        #newItem {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }

        .checked-row{
            background-color: #d3d3d3;
            text-decoration: line-through;
        }
    </style>
</head>

<body>
    <!-- Page Heading -->
    <div class="text-center">
        <h1 class="display-4" style="color: #4A743E;">Shopping List</h1>
        <br>
    </div>

    <!-- Add to shopping list 'form' -->
    <div id="shoppingListContainer" class="table-responsive">
        <form asp-action="AddItemToShoppingList" method="post">
            <table class="table">
                <thead>
                    <tr>
                        <th>Item Name</th>
                        <th>Amount</th>
                        <th>Unit</th>
                        <th>Description</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><input type="text" name="newIngredient.Name" required /></td>
                        <td><input class="smallInput" type="text" name="newIngredient.Quantity" /></td>
                        <td><input class="smallInput" type="text" name="newIngredient.Unit" /></td>
                        <td><input type="text" name="newIngredient.Qualifier" /></td>
                        <td><button type="submit" class="btn btn-custom">Add Item</button></td>
                    </tr>
                </tbody>
            </table>
        </form>
    </div>
    
    <br />

    <!-- View current shopping list items -->
    <div id="shoppingListContainer">
        <!-- Search Bar -->
        <div class="text-center">
            <div class="search-container">
                <input type="text" id="ingredientSearch" placeholder="Search" oninput="scrollToIngredient()">
            </div>
        </div>

        <!-- ABC Nav Bar -->
        <div class="alphabet">
            @foreach (var letter in @Model.ABCShoppingList.Keys)
            {
                <a href="#@letter">@letter</a>
            }
        </div>

        <!-- Current shopping list items -->
        <div class="table-responsive">
            @foreach (var ABCList in @Model.ABCShoppingList)
            {
                <h2 id="@ABCList.Key">@ABCList.Key</h2>
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Item Name</th>
                            <th>Amount</th>
                            <th>Unit</th>
                            <th>Description</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    @foreach (var item in ABCList.Value)
                    {
                        <tbody>
                            <tr>
                                <td><input class="item-left" type="checkbox" onchange="toggleCompletion(this)"></td>
                                <td class="editable"><a href="/Recipe/Index/@item.Name">@item.Name</a></td>
                                <td class="editable">@item.Quantity</td>
                                <td class="editable">@item.Unit</td>
                                <td class="editable">@item.Qualifier</td>
                                <td><button onclick="editRow(this)" class="btn btn-custom">Edit</button></td>
                                <form method="post" asp-controller="Pantry" asp-action="RemoveFromPantry">
                                    <input type="hidden" name="ingredientName" value="@item.Name" />
                                    <td><button type="submit" class="btn btn-custom">Delete</button></td>
                                </form>
                            </tr>
                        </tbody>
                    }
                </table>
            }
        </div>
        @* <ul id="shoppingList">
            @if (@Model.items.Count != 0) {
                foreach (var item in @Model.items) {
                    <li>
                        <div class="item-left">
                            <input type="checkbox" onchange="toggleCompletion(this)">
                            <span>@item.Name</span>
                        </div>
                        <div class="button-container">
                            <button class="pantry-btn" onclick="addToPantry('@item.Name')">Add to Pantry</button>
                            <button class="remove-btn" onclick="removeItem(this)">Remove</button>
                        </div>
                    </li>
                }
            } else {
                <p>No items in the shopping list.</p>
            }
        </ul> *@
    </div>

    <!-- javascript for button/list functionality -->
    <script>
        // remove an item from the pantry list (client-side only)
        function removeItem(event) {
            const item = event.target.closest('li'); // get closest list item
            if (item) {
                item.remove(); // remove item from the DOM
            }
        }

        function scrollToIngredient() {
            const searchInput = document.getElementById('ingredientSearch').value.toLowerCase();
            const items = document.querySelectorAll('.ingredients-list li a');

            items.forEach(item => {
                if (item.textContent.toLowerCase().includes(searchInput)) {
                    const ingredientSection = item.closest('ul').previousElementSibling; // get following header (h2)
                    ingredientSection.scrollIntoView({ behavior: 'smooth' });
                    return; // exit loop
                }
            });
        }

        // Edit item - client side only (changes text to text boxes & edit button to save)
        function editRow(button) {
            // Get row of button
            var row = button.closest('tr');

            // Change each cell to a textbox
            var cells = row.querySelectorAll('.editable');
            cells.forEach(function (cell) {
                var currentText = cell.textContent;
                cell.innerHTML = `<input type="text" value="${currentText}" />`;
            });

            button.textContent = 'Save';
            button.setAttribute('onclick', 'saveRow(this)');
        }

        // Client side only, Needs to be updated to save to server side - should have cancel button added
        function saveRow(button) {
            // Get row of button
            var row = button.closest('tr');

            // Change each cell to text with updated values
            var cells = row.querySelectorAll('.editable');
            cells.forEach(function (cell) {
                var inputField = cell.querySelector('input');
                if (inputField) { cell.textContent = inputField.value; }
            });

            button.textContent = 'Edit';
            button.setAttribute('onclick', 'editRow(this)');
        }

        // remove an item from the list
        function removeItem(element) {
            element.parentElement.parentElement.remove(); // remove the entire list item
        }

        // handle "Add to Pantry" action
        function addToPantry(item) {
            alert(item + " added to pantry!");
            // Here you can handle logic for pantry
        }

        // add a new item to the list
        document.getElementById("addItemBtn").addEventListener("click", function() {
            const newItem = document.getElementById("newItem").value;

            if (newItem.trim() !== "") {
                // create a new list item with a checkbox, add to pantry button, and remove button
                const li = document.createElement("li");

                // left section for the checkbox and text
                const itemLeft = document.createElement("div");
                itemLeft.classList.add("item-left");

                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.onchange = function() { toggleCompletion(this); };

                const textSpan = document.createElement("span");
                textSpan.textContent = newItem;

                itemLeft.appendChild(checkbox);
                itemLeft.appendChild(textSpan);

                // button container to hold both "Add to Pantry" and "Remove" buttons
                const buttonContainer = document.createElement("div");
                buttonContainer.classList.add("button-container");

                const pantryBtn = document.createElement("button");
                pantryBtn.textContent = "Add to Pantry";
                pantryBtn.classList.add("pantry-btn");
                pantryBtn.onclick = function() { addToPantry(newItem); };

                const removeBtn = document.createElement("button");
                removeBtn.textContent = "Remove";
                removeBtn.classList.add("remove-btn");
                removeBtn.onclick = function() { removeItem(this); };

                buttonContainer.appendChild(pantryBtn);
                buttonContainer.appendChild(removeBtn);

                li.appendChild(itemLeft);  // add checkbox and text to the left side
                li.appendChild(buttonContainer); // add buttons to the right side

                // add the new item to the list
                document.getElementById("shoppingList").appendChild(li);

                // clear the input field
                document.getElementById("newItem").value = "";
            }
        });

        // toggle completion status of items
        function toggleCompletion(checkbox) {
            const row = checkbox.closest('tr')
            if(checkbox.checked){
                row.classList.add('checked-row');
            }
            else{
                row.classList.remove('checked-row')
            }
        }

        // Function to add an item from the shopping list to the pantry
        function addToPantry(itemName) {
            fetch(`/ShoppingList/AddItemToPantry?itemName=${itemName}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => {
                if (response.ok) {
                    alert(`${itemName} added to pantry!`);
                    location.reload(); // Optionally reload to see the changes
                } else {
                    alert("Failed to add item to pantry.");
                }
            });
        }

    </script>
</head>
</body>
